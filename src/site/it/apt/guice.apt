 ------
 Guice Integration
 ------
 Marco Speranza and Simone Tripodi
 ------
 2010
 ------
~~
~~   Copyright 2012 The 99 Software Foundation
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

~~author: Marco Speranza
~~version: $Id: index.apt 924 2009-12-31 10:11:36Z  marco.speranza79 $

Integrazione con Google Guice!

  La libreria <JUnice> fornisce un paio di annotazioni che facilitano il riuso di
  moduli google-guice nelle vostre classi di test.

  [[1]] <<<@org.nnsoft.guice.junice.annotation.GuiceModule>>>: annotazione di classe utile per
    elencare una lista di moduli con costruttori di default.

  [[2]] <<<@org.nnsoft.guice.junice.annotation.GuiceProvidedModules>>>: annotazione di metodo che serve
    a definire un provider per la creazione di un modulo. Questa annotazione Ë necessaria
    per istanziare moduli che non hanno un costruttore di default.

*  L' annotazione GuiceModule

  L'esempio seguente mostra un uso tipico dell'annotaizone GuiceModule

  Dato il seguente modulo google-guice:

+----------------------------------------+
public class SimpleModule extends AbstractModule {

    @Override
    protected void configure() {
        bind(Hello.class).to(HelloWorld.class);
    }

}
+----------------------------------------+

  questo puÚ essere riutilizzato in una classe di test specificando:

+----------------------------------------+
@RunWith(JUniceRunner.class)
@GuiceModules(modules={ SimpleModule.class,
                        AnotherAcmeModule.class })
public class SimpleTest {

 @com.google.inject.Inject
  private Hello helloWorld;

  @org.junit.Test
  public void testInjectNotStatic() {
    assertNotNull(helloWorld);
    assertEquals("Hello World!!!!", helloWorld.sayHallo());
  }

}
+----------------------------------------+


* L'annotazione GuiceProvidedModule

  L'annotaizone GuiceProviderModule Ë usata quando il vostro test case ha bisogno
  di un modulo che <<non>> ha un costruttore di default.
  Nel vostro test case Ë possibile dichiarare un metodo <<public static>> che ha come tipo di ritorno
  <com.google.inject.Module> oppure Iterable \<<com.google.inject.Module>\> oppure
  <com.google.inject.Module[]> e annotare questo questo metodo con l'annotazione <GuiceProvidedModule>.
  In questo modo <JUniceRunner> invocher‡ questo metodo in fase di inizializzazione dell'iniettore <google guice>

  Ecco di seguito un esempio:

+----------------------------------------+
public class ComplexModule extends AbstractModule {

    private String name;

    public ComplexModule(String name) {
        this.name = name;
    }

    @Override
    protected void configure() {
        bind(WhoIm.class).toInstance(new WhoIm(name));
    }

}
+----------------------------------------+



+----------------------------------------+
@RunWith(JUniceRunner.class)
public class SimpleTest {

    @GuiceProvidedModules
    public static Module createComplexModule(){
        return new ComplexModule("Marco Speranza");
    }

    @com.google.inject.Inject
    public static WhoIm whoIm;

    @org.junit.Test
    public void testWhoIm() {
        assertNotNull(whoIm);
        assertEquals("Marco Speranza", whoIm.sayWhoIm());
    }

}
+----------------------------------------+

  Infine è possibile creare un modulo <on the fly>.

  Se la vostra classe di test
  estente la classe <<<com.google.inject.AbstractModule>>>  oppure implementa
  l'interfaccia <<<com.google.inject.Module>>>, <JUniceRunner> aggiunger‡ alla lista dei moduli
  dell'iniettore anche la classe di test stessa.

  Vediamo un esempio:

+----------------------------------------+
@RunWith(JUniceRunner.class)
public class SimpleTest extends AbstractModule {

    @Override
     public void configure() {
        bind(Integer.class)
             .annotatedWith(Names.named("version"))
                    .toInstance(10);
    }

    @Inject
    @Named("version")
    private Integer version;

    @Test
    public void testInjectModuleClass(){
        assertNotNull(version);
        assertEquals(10, version.intValue());
    }

}
+----------------------------------------+
