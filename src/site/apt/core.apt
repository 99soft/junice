 ------
 JUnice core - The JUniceRunner
 ------
 The 99 Software Foundation
 ------
 2010
 ------
~~
~~   Copyright 2010-2012 The 99 Software Foundation
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

JUnice core - The JUniceRunner

  The core of <JUnice> is the <<<org.nnsoft.guice.junice.JUniceRunner>>> class, that's a
  <JUnit Runner> and extends <org.junit.internal.runners.BlockJUnit4ClassRunner>
  For each test case the <JUniceRunner> initializes a google-guice <injector>
  before that your test case class is instantiated.

  So you have an injector ready to use already into any method <<@BeforeClass>>.

Getting Started

  To use <JUnice> users have to annotate the <junit> test class in the following
  way:

+----------------------------------------+
@RunWith(JUniceRunner.class)
public class SimpleTest {

   @com.google.inject.Inject
   private com.google.inject.Injector injector;

   @org.junit.BeforeClass
   public static void setUpYourClass(){
        // use injector.
        injector.getInstance(AcmeService.class);
   }

}
+----------------------------------------+

  The <JUnice> runner can be used also in a super class:

+----------------------------------------+
@com.google.inject.ImplementedBy(AcmeDatabasePoolImpl.class)
public interface AcmeDatabasePool {

    void open();

    void close();
}
+----------------------------------------+

+----------------------------------------+
@RunWith(JUniceRunner.class)
abstract public class DatabasePoolInitTest {

   @com.google.inject.Inject
   private static AcmeDatabasePool pool;

   @org.junit.BeforeClass
   public static void setUpYourClass(){
        pool = injector.getInstance(AcmeDatabasePool.class);
        pool.open();
        ...
   }

   @org.junit.AfterClass
   public static void setUpYourClass(){
        ...
        pool.close();
        ...
   }

}
+----------------------------------------+

+----------------------------------------+
public class DatabaseClassTest  extends DatabasePoolInitTest{

   @org.junit.Test
   public  void test(){
        ...
   }

}
+----------------------------------------+
